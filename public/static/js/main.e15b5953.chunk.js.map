{"version":3,"sources":["main/Layout/NavBar.jsx","main/WeatherCard/WeatherCard.jsx","main/Forecast/ForecastList.jsx","main/Weather/Weather.jsx","main/Layout/InnerPage.jsx","main/Layout/Footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavBar","location","Navbar","bg","expand","Container","Brand","href","Text","prototype","PropTypes","string","defaultProps","WeatherCard","main","weather","title","footer","loading","Card","className","Body","Title","Spinner","animation","icon","alt","description","src","style","maxWidth","temp","temp_max","temp_min","Footer","max_temp","min_temp","propType","object","Forecast","forecast","Row","map","item","date","array","bool","cities","city","value","Weather","useState","current","setCurrent","setForecast","showDropdown","setDropdownVisibility","setLocation","selected","setSelection","setLoading","useEffect","axios","get","then","response","data","catch","error","console","log","getWeather","list","getForecast","Col","fluid","Nav","NavDropdown","show","onClick","id","Item","name","handleCitySelection","InnerPage","minHeight","size","App","onSelect","str","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e15b5953.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Container } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction NavBar({ location }) {\r\n  return (\r\n    <Navbar bg=\"primary\" expand=\"sm\">\r\n      <Container>\r\n        <Navbar.Brand href=\"#home\">Tu Clima</Navbar.Brand>\r\n        {location && <Navbar.Text>{location}</Navbar.Text>}\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nNavBar.prototype = {\r\n  location: PropTypes.string,\r\n};\r\n\r\nNavBar.defaultProps = {\r\n  location: \"\",\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { Card, Spinner } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction WeatherCard({ main, weather, title, footer, loading }) {\r\n  return (\r\n    <Card className=\"text-center overflow-hidden m-1\">\r\n      <Card.Body>\r\n        {title && <Card.Title>{title}</Card.Title>}\r\n\r\n        {loading ? (\r\n          <Spinner animation=\"grow\" className=\"m-2\"></Spinner>\r\n        ) : (\r\n          <>\r\n            {weather.icon ? (\r\n              <img\r\n                alt={weather.description}\r\n                src={`/images/${weather.icon}.png`}\r\n                style={{ maxWidth: \"10em\" }}\r\n              />\r\n            ) : (\r\n              <></>\r\n            )}\r\n            <Card.Title>{main.temp} °C</Card.Title>\r\n            <Card.Text>Max {main.temp_max} °C</Card.Text>\r\n            <Card.Text>Min {main.temp_min} °C</Card.Text>\r\n            <Card.Text>{weather.description}</Card.Text>\r\n          </>\r\n        )}\r\n      </Card.Body>\r\n      {footer && <Card.Footer>{footer}</Card.Footer>}\r\n    </Card>\r\n  );\r\n}\r\n\r\nWeatherCard.defaultProps = {\r\n  main: {\r\n    temp: \"-\",\r\n    max_temp: \"-\",\r\n    min_temp: \"-\",\r\n  },\r\n  weather: {\r\n    description: \"-\",\r\n  },\r\n};\r\n\r\nWeatherCard.propType = {\r\n  main: PropTypes.object,\r\n  weather: PropTypes.object,\r\n  title: PropTypes.string,\r\n  footer: PropTypes.string,\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\nimport { Container, Row, Spinner } from \"react-bootstrap\";\r\nimport WeatherCard from \"../WeatherCard/WeatherCard\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Forecast({ forecast, loading }) {\r\n  return (\r\n    <Container>\r\n      <Row className=\"justify-content-md-center\">\r\n        {loading ? (\r\n          <Spinner animation=\"grow\" className=\"m-2\"></Spinner>\r\n        ) : (\r\n          <>\r\n            {forecast.map((item) => (\r\n              <WeatherCard\r\n                main={item.main}\r\n                weather={item.weather}\r\n                footer={item.date}\r\n                key={item.date}\r\n              ></WeatherCard>\r\n            ))}\r\n          </>\r\n        )}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nForecast.defaultProps = {\r\n  forecast: [],\r\n  loading: false,\r\n};\r\n\r\nForecast.prototype = {\r\n  forecast: PropTypes.array,\r\n  loading: PropTypes.bool,\r\n};\r\n\r\nexport default Forecast;\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Col, Row, NavDropdown, Nav } from \"react-bootstrap\";\r\nimport Forecast from \"../Forecast/ForecastList\";\r\nimport WeatherCard from \"../WeatherCard/WeatherCard\";\r\n\r\nconst cities = [\r\n  { city: \"Ubicacion Actual\", value: \"\" },\r\n  { city: \"La Plata\", value: \"La Plata, AR\" },\r\n  { city: \"Rosario\", value: \"Rosario, AR\" },\r\n  { city: \"Bahía Blanca\", value: \"Bahia Blanca, AR\" },\r\n  { city: \"Ushuaia\", value: \"Ushuaia, AR\" },\r\n  { city: \"Comodoro Rivadavia\", value: \"Comodoro Rivadavia, AR\" },\r\n];\r\n\r\nfunction Weather({ city }) {\r\n  const [current, setCurrent] = useState({});\r\n  const [forecast, setForecast] = useState([]);\r\n  const [showDropdown, setDropdownVisibility] = useState(false);\r\n  const [location, setLocation] = useState(null);\r\n  const [selected, setSelection] = useState(\"Ubicación Actual\");\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(\r\n    function () {\r\n      setLoading(true);\r\n\r\n      const getWeather = (location) => {\r\n        axios\r\n          .get(\"/v1/current/\" + location)\r\n          .then((response) => {\r\n            setCurrent(response.data);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      };\r\n\r\n      const getForecast = (location) => {\r\n        axios\r\n          .get(\"/v1/forecast/\" + location)\r\n          .then((response) => {\r\n            let { list } = response.data;\r\n            setForecast(list);\r\n            setLoading(false);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      };\r\n\r\n      getWeather(location || city);\r\n      getForecast(location || city);\r\n    },\r\n    [city, location]\r\n  );\r\n\r\n  function handleCitySelection(item) {\r\n    setSelection(item.city);\r\n    setLocation(item.value);\r\n    setDropdownVisibility(false);\r\n  }\r\n\r\n  return (\r\n    <Row className=\"justify-content-md-center\">\r\n      <Col fluid=\"true\">\r\n        <Nav className=\"mr-auto\">\r\n          <NavDropdown\r\n            show={showDropdown}\r\n            onClick={() => setDropdownVisibility(!showDropdown)}\r\n            title={selected}\r\n            id=\"basic-nav-dropdown\"\r\n          >\r\n            {cities.map((item) => (\r\n              <NavDropdown.Item\r\n                value={item.value}\r\n                name={item.city}\r\n                onClick={() => handleCitySelection(item)}\r\n                key={item.value}\r\n              >\r\n                {item.city}\r\n              </NavDropdown.Item>\r\n            ))}\r\n          </NavDropdown>\r\n        </Nav>\r\n        <WeatherCard\r\n          title={location}\r\n          main={current.main}\r\n          weather={current.weather}\r\n          loading={loading}\r\n        ></WeatherCard>\r\n        <Forecast forecast={forecast} loading={loading} />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nWeather.propType = {\r\n  city: PropTypes.string,\r\n};\r\n\r\nWeather.defaultProps = {\r\n  city: \"\",\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport Weather from \"../Weather/Weather\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction InnerPage({ city }) {\r\n  return (\r\n    <Container style={{ minHeight: \"100vh\" }}>\r\n      <Row>\r\n        <Col>\r\n          <Weather city={city}></Weather>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nInnerPage.defaultProps = {\r\n  city: \"\"\r\n};\r\n\r\nInnerPage.prototype = {\r\n  city: PropTypes.string\r\n};\r\n\r\nexport default InnerPage;\r\n","import React from \"react\";\r\nimport { Navbar, Container } from \"react-bootstrap\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <Navbar bg=\"dark\" size=\"xl\">\r\n      <Container>\r\n        <Navbar.Brand href=\"#home\">OmniboyOK - Github</Navbar.Brand>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport NavBar from \"./main/Layout/NavBar\";\r\nimport InnerPage from \"./main/Layout/InnerPage\";\r\nimport Footer from \"./main/Layout/Footer\";\r\n\r\nfunction App() {\r\n  const [location, setLocation] = useState(\"\");\r\n  useEffect(function () {\r\n    const getData = () => {\r\n      axios\r\n        .get(\"/v1/location\")\r\n        .then((response) => {\r\n          setLocation(response.data);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    };\r\n\r\n    getData();\r\n\r\n    return null;\r\n  }, []);\r\n\r\n  function handleLocationChange(str) {\r\n    setLocation(str);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar location={location} onSelect={handleLocationChange} />\r\n      <InnerPage city={location} />\r\n      <Footer></Footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}